// @flow

import * as React from 'react'
import type { Observable } from 'rxjs'
export type Undux<Actions: Object> = $ObjMap<Actions, Lift<Actions>>

type Lift<Actions: Object> = <V>(value: V) => Lifted<Actions, V>

type Lifted<Actions, T> = {
  key: $Keys<Actions>,
  previousValue: T,
  value: T
}

export interface Store<Actions: Object> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<Lifted<Actions, $ElementType<Actions, K>>>;
  beforeAll(): Observable<$Values<Undux<Actions>>>;
  getState(): $ReadOnly<Actions>;
}

declare export class StoreSnapshot<Actions: Object> implements Store<Actions> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<Lifted<Actions, $ElementType<Actions, K>>>;
  beforeAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
  getState(): $ReadOnly<Actions>;
}

declare export class StoreDefinition<Actions: Object> implements Store<Actions> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<Lifted<Actions, $ElementType<Actions, K>>>;
  beforeAll(): Observable<$Values<Undux<Actions>>>;
  getState(): $ReadOnly<Actions>;
}

declare export function createStore<Actions: Object>(initialState: Actions): StoreDefinition<Actions>
export type Plugin<Actions: Object> = (store: StoreDefinition<Actions>) => StoreDefinition<Actions>
declare export var withLogger: Plugin<Object>
declare export var withReduxDevtools: Plugin<Object>

declare export function connect<Actions: Object>(
  store: StoreDefinition<Actions>
): <Props: {store: Store<Actions>}>(
  Component: React.ComponentType<Props>
) =>
  Class<React.Component<$Diff<Props, {store: Store<Actions>}>>>
